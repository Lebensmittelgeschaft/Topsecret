input addCommentInput {
  secretId: ID!
  postBy: ID!
  text: String!
  clientMutationId: String
}

type addCommentPayload {
  secret: Secret
  clientMutationId: String
}

"""Comment on secret model"""
type Comment {
  """Id of the comment"""
  id: String!

  """Id of the user who post the comment"""
  postBy: User

  """Actual text of the comment"""
  text: String!

  """Timestamp of the date the comment published"""
  timestamp: String
}

input createMessageInput {
  sender: String!
  receiver: String!
  text: String!
  clientMutationId: String
}

type createMessagePayload {
  message: Message
  clientMutationId: String
}

input createSecretInput {
  publisher: ID!
  text: String!
  clientMutationId: String
}

type createSecretPayload {
  secret: Secret
  clientMutationId: String
}

input createUserInput {
  id: ID!
  nickname: String!
  clientMutationId: String
}

type createUserPayload {
  user: User
  clientMutationId: String
}

"""Last message model of conversation between 2 users"""
type LastMessage {
  """User id of the contact in the conversation"""
  contact: String!

  """Message object model of the last message in the conversation"""
  message: Message
}

"""Message object model"""
type Message {
  """User id of the sender of the message"""
  sender: String!

  """User id of the receiver of the message"""
  receiver: String!

  """Text of the message"""
  text: String!

  """Timestamp of the message"""
  timestamp: String
}

"""Main mutation contains all models mutations"""
type Mutation {
  createUser(input: createUserInput!): createUserPayload
  updateUserNickname(input: updateUserNicknameInput!): updateUserNicknamePayload
  createSecret(input: createSecretInput!): createSecretPayload
  addComment(input: addCommentInput!): addCommentPayload
  toggleLike(input: toggleLikeInput!): toggleLikePayload
  toggleDislike(input: toggleDislikeInput!): toggleDislikePayload
  createMessage(input: createMessageInput!): createMessagePayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Main query contains all models queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Get user by id"""
  user(id: ID!): User

  """Get all users"""
  users: [User]

  """Get specific secret by secret id"""
  secert(id: ID!): Secret

  """Get secrets by pagination"""
  secrets(pageNum: Int): [Secret]

  """Get conversation messages of user with pagination"""
  messages(userOne: String!, userTwo: String!, pageNum: Int!): [Message]

  """Get last message from all user's conversations"""
  lastMessages(userId: String!): [LastMessage]
}

"""Secret object model"""
type Secret implements Node {
  """The ID of an object"""
  id: ID!

  """The user id who publish the secret"""
  publisher: User

  """The text of the secret"""
  text: String!

  """Array of the comment published on secret"""
  comments: [Comment]

  """Number of likes of the secret"""
  likes: [User]

  """Number of dislikes of the secret"""
  dislikes: [User]

  """Timestamp in milliseconds of date the secret published"""
  timestamp: String
}

input toggleDislikeInput {
  secretId: ID!
  userId: ID!
  clientMutationId: String
}

type toggleDislikePayload {
  secret: Secret
  clientMutationId: String
}

input toggleLikeInput {
  secretId: ID!
  userId: ID!
  clientMutationId: String
}

type toggleLikePayload {
  secret: Secret
  clientMutationId: String
}

input updateUserNicknameInput {
  id: ID!
  newNickname: String!
  clientMutationId: String
}

type updateUserNicknamePayload {
  user: User
  clientMutationId: String
}

"""User object model"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """Nickname of the user"""
  nickname: String!
}
